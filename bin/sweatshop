#!/usr/bin/env ruby
require 'yaml'
require 'commander/import'
require 'colorize'
require_relative '../lib/sweatshop/cli/common'
require_relative '../lib/sweatshop/cli/job'
require_relative '../lib/sweatshop/cli/start'
require_relative '../lib/sweatshop/cli/config'
require_relative '../lib/sweatshop/config'
require_relative '../lib/sweatshop/create-config-directories'

program :name, 'Robot Sweatshop'
program :version, '0.3.0'
program :description, 'A lightweight, unopinionated CI server'
program :help, 'Author', 'Justin Scott <jvscott@gmail.com>'

command :job do |c|
  c.syntax = 'sweatshop job <name>'
  c.description = 'Creates and edits jobs.'
  c.option '--auto', 'Create the file without opening the editor.'
  c.action do |args, options|
    options.default :auto => false
    if args.count < 1
      notify :failure, "Specify a job name as the command argument."
      exit 1
    else
      job_file = get_job_path for_job: args.first
      create job_file, with_contents: default_job
      edit job_file unless options.auto
    end
  end
end

command :config do |c|
  c.syntax = 'sweatshop config [options]'
  c.description = 'Creates and edits the user configuration file.'
  c.option '--auto', 'Create the file without opening the editor.'
  c.action do |args, options|
    options.default :auto => false
    config_file = get_config_path for_scope: args.first
    create config_file, with_contents: default_config
    edit config_file unless options.auto
  end
end

command :start do |c|
  c.syntax = 'sweatshop start [options]'
  c.description = 'Start the Sweatshop.'
  c.option '--testing', 'Load the testing Eye configuration.'
  c.action do |_args, options|
    options.default :testing => false
    environment = options.testing ? 'testing' : 'production'
    start_sweatshop for_environment: environment
  end
end

command :stop do |c|
  c.syntax = 'sweatshop stop'
  c.description = 'Stop the Sweatshop.'
  c.action do
    notify :info, `eye stop robot_sweatshop`
  end
end
