#!/usr/bin/env ruby
require 'yaml'
require 'commander/import'
require 'colorize'
require_relative 'lib/common'
require_relative 'lib/job'
require_relative 'lib/inspect'
require_relative 'lib/start'
require_relative 'lib/config'
require_relative '../config'

program :name, 'Robot Sweatshop'
program :version, '0.1.2'
program :description, 'A lightweight, unopinionated CI server'
program :help, 'Author', 'Justin Scott <jvscott@gmail.com>'

command :job do |c|
  c.syntax = 'sweatshop job <name>'
  c.description = 'Creates and edits jobs.'
  c.option '--list', 'List all available jobs.'
  c.option '--inspection', 'Inspect the given job.'
  c.action do |args, options|
    options.default :list => false
    options.default :inspect => false
    
    job_file = get_job_file for_job: args.first
    if options.list
      list_jobs
    elsif options.inspection
      validate job_file unless job_file.nil?
    else
      create_and_edit_job job_file unless job_file.nil?
    end
  end
end

command :start do |c|
  c.syntax = 'sweatshop start [options]'
  c.description = 'Start the Sweatshop.'
  c.option '--testing', 'Load the testing Eye configuration.'
  c.action do |args, options|
    options.default :testing => false
    environment = options.testing ? 'testing' : 'production'
    start_sweatshop for_environment: environment
  end
end

command :stop do |c|
  c.syntax = 'sweatshop stop'
  c.description = 'Stop the Sweatshop.'
  c.action do
    notify :info, `eye stop robot_sweatshop`
  end
end

command :setup do |c|
  c.syntax = 'sweatshop setup'
  c.description = 'Create the directories and set permissions as specified in the config.'
  c.action do
    require_relative 'lib/setup'
  end
end

command :directory do |c|
  c.syntax = 'sweatshop directory'
  c.description = 'Return the path that Robot Sweatshop runs from.'
  c.action do
    puts File.expand_path("#{__dir__}/..")
  end
end

command :config do |c|
  c.syntax = 'sweatshop config [options]'
  c.description = 'Creates and edits the user configuration file.'
  c.option '--reset', 'Reset to factory defaults before editing.'
  c.action do |args, options|
    options.default :reset => false
    remove_user_config if options.reset
    create_and_edit_user_config
  end
end
