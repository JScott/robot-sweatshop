#!/usr/bin/env ruby
require 'ezmq'
require 'faker'
require 'fileutils'
require 'contracts'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
using ExtendedEZMQ
$stdout.sync = true
$stderr.sync = true
include Contracts

# TODO: check existing worker ids. it'd be a problem to share a workspace
@worker_id = ARGV[0] || "#{Faker::Name.first_name}"

Contract Hash, Proc => Any
def from_workspace(named:)
  workspace = "#{named}-#{@worker_id}"
  @sockets[:logger].write "Workspace: #{workspace}"
  path = File.expand_path "#{configatron.workspace_path}/#{workspace}"
  FileUtils.mkpath path
  Dir.chdir(path) { yield if block_given? }
end

Contract String => String
def ensure_shell_for(command)
  "#{command};"
end

Contract String, Hash => Maybe[IO]
def stream(command, with_context:)
  command = ensure_shell_for command
  IO.popen(with_context, command) do |stream|
    @sockets[:logger].write stream.gets until stream.eof?
  end
end

Contract String, Hash => nil
def execute(command, context)
  @sockets[:logger].write "Executing '#{command}'"
  begin
    stream command, with_context: context
  rescue Errno::ENOENT => error
    @sockets[:logger].write error.message
  end
  @sockets[:logger].write "Execution complete with exit status: #{$?.exitstatus}"
end

Contract Fixnum => nil
def finish(id)
  @sockets[:conveyor].request({ method: 'finish', data: id }, {})
  @sockets[:logger].write "Job finished.\n\n"
end

Contract Array, Hash => Any
def run(commands, with_context: {})
  commands.each { |command| execute command, with_context }
end

Contract None => Any
def run_implicit_job
  implicit_job_file = '.robot_sweatshop.yaml'
  return unless File.exist? implicit_job_file
  implicit_job = YAML.load_file implicit_job_file
  run implicit_job['commands'], with_context: implicit_job['environment']
end

@sockets = {
  conveyor: EZMQ::Client.new(port: configatron.conveyor_port),
  puller: EZMQ::Puller.new(:connect, port: configatron.worker_port),
  logger: EZMQ::Logger.new('worker')
}
@sockets.each do |key, socket|
  socket.serialize_with_json! unless key == :logger
end

@sockets[:logger].write 'Starting'
@sockets[:puller].listen do |data|
  @sockets[:logger].write "Running: #{data}"
  from_workspace named: data[:job_name] do
    run data[:commands], with_context: data[:context]
    run_implicit_job
  end
  finish data[:job_id]
end
