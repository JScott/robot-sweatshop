#!/usr/bin/env ruby
require 'bundler/setup'
require 'ezmq'
require 'faker'
require 'fileutils'
require 'contracts'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
using ExtendedEZMQ
$stdout.sync = true
$stderr.sync = true
include Contracts

# TODO: check existing worker ids. it'd be a problem to share a workspace
@worker_id = ARGV[0] || "#{Faker::Name.first_name}"

Contract Hash, Proc => Any
def from_workspace(named:)
  workspace = "#{named}-#{@worker_id}"
  puts "Workspace: #{workspace}"
  path = File.expand_path "#{configatron.workspace_path}/#{workspace}"
  FileUtils.mkpath path
  Dir.chdir(path) { yield if block_given? }
end

Contract Hash, String => nil
def execute(context, command)
  puts "Executing '#{command}'..."
  # TODO: path.split(' ') to bypass the shell when we're not using env vars
  IO.popen(context, command) do |io_stream|
    while line = io_stream.gets
      puts line
    end
  end
  puts "Execution complete with exit status: #{$?.exitstatus}"
end

Contract Fixnum => nil
def finish(id)
  @sockets[:conveyor].request({method: 'finish', data: id}, {})
  puts "Job finished.\n\n"
end

puts 'Starting'
@sockets = {
  conveyor: EZMQ::Client.new(port: configatron.conveyor_port),
  puller: EZMQ::Puller.new(port: configatron.worker_port)
}
@sockets.each { |_key, socket| socket.serialize_with_json! }

@sockets[:puller].listen do |data|
  puts "Running: #{data}"
  from_workspace named: data[:job_name] do
    context = data[:context] || {}
    data[:commands].each { |command| execute context, command }
  end
  finish data[:job_id]
end
