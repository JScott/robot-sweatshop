#!/usr/bin/env ruby
require 'bundler/setup'
require 'json'
require 'ezmq'
require 'contracts'
require 'sweatshop/config'
require 'sweatshop/payload'

$stdout.sync = true
include Contracts

Contract String => Bool
def is_json?(string)
  begin
    JSON.load string
    true
  rescue JSON::ParserError => e  
    false
  end 
end

Contract String => String
def detect_format_of(payload)
  if payload.empty?
    'empty'
  elsif is_json? payload
    payload = JSON.load payload
    from_github = payload['compare'] && payload['compare'].match(/github.com/)
    from_github ? 'Github' : 'JSON'
  elsif payload.start_with? 'payload='
    'Bitbucket'
  else
    'unsupported'
  end
end

Contract String => Or[Payload, nil]
def parse(payload)
  format = detect_format_of payload
  lib_file = "#{__dir__}/../lib/sweatshop/payload/#{format}.rb"
  if File.file?(lib_file)
    require_relative lib_file
    Object.const_get("#{format}Payload").new payload
  else
    puts "Dropping #{format} payload, returning an empty string"
    nil
  end
end

puts 'Started'
server = EZMQ::Server.new port: configatron.payload_parser_port#, encode: -> m { JSON.dump m }
server.listen do |payload|
  puts "Parsing: #{payload}"
  payload = parse payload
  if payload
    JSON.dump payload.to_hash
  else
    ''
  end
end
