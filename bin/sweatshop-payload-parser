#!/usr/bin/env ruby
require 'oj'
require 'ezmq'
require 'contracts'
require 'robot_sweatshop/config'
require 'robot_sweatshop/payload'
require 'robot_sweatshop/connections'
$stdout.sync = true
include Contracts
using ExtendedEZMQ

Contract String => Bool
def json?(string)
  Oj.load string
  true
rescue Oj::ParseError
  false
end

Contract String => Bool
def from_github?(user_agent)
  user_agent.start_with? 'Github-Hookshot'
end

Contract String => Bool
def from_bitbucket?(user_agent)
  user_agent.start_with? 'Bitbucket.org'
end

Contract Hash => String
def detect_format_of(request)
  return 'empty' if request[:payload].empty?
  return 'Github' if from_github? request[:user_agent]
  return 'Bitbucket' if from_bitbucket? request[:user_agent]
  return 'JSON' if json? request[:payload]
  'unsupported'
end

Contract String, String => Or[Hash, nil]
def payload_hash_from(payload, format)
  Object.const_get("#{format}Payload").new(payload).to_hash
rescue NameError
  nil
end

Contract Hash, Hash => Hash
def formatted(payload = {}, error:'')
  { data: payload, error: error }
end

Contract String, String => Hash
def parse(raw_payload, format)
  return formatted if format == 'empty'
  return formatted error: 'Unknown format' if format == 'unsupported'
  payload = payload_hash_from raw_payload, format
  return formatted error: "Invalid #{format} payload" if payload.nil?
  formatted payload
end

@sockets = {
  server: EZMQ::Server.new(port: configatron.payload_parser_port),
  logger: EZMQ::Logger.new('payload_parser')
}
@sockets.each do |key, socket|
  socket.serialize_with_json! unless key == :logger
end

@sockets[:logger].write 'Started'
@sockets[:server].listen do |request|
  @sockets[:logger].write "Parsing: #{request}"
  format = detect_format_of request
  parse request[:payload], format
end
