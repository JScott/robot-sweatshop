#!/usr/bin/env ruby
require 'bundler/setup'
require 'yaml'
require 'contracts'
require 'exponential_backoff'
require 'ezmq'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
$stdout.sync = true
include Contracts
using ExtendedEZMQ

Contract Hash => Hash
def sanitize(data)
  data = data.map { |key, value| {key => value.to_s} }
  data.reduce(:merge)
end

Contract Hash, Hash => Hash
def job_context(job_environment, context_from_payload)
  sanitize job_environment.merge(context_from_payload)
end

Contract Hash, Hash, Hash => Hash
def assemble(job, payload, definition)
  {
    commands: definition['commands'],
    context: job_context(definition['environment'] || {}, payload),
    job_name: job[:job_name],
    job_id: job[:job_id]
  }
end

Contract None => Or[Hash,nil]
def request_job
  job_id = @sockets[:conveyor].request({method: 'dequeue'}, {})
  return nil if job_id.nil?
  raw_job = @sockets[:conveyor].request({method: 'lookup', data: job_id}, {})
  puts "Assembling: '#{raw_job}'"
  raw_job.merge job_id: job_id
end

Contract EZMQ::Socket, Any => Hash
def request(socket, data)
  response = socket.request data, {}
  raise response[:error] unless response[:error].empty?
  response[:data]
end

Contract Hash => [Hash, Hash]
def request_data_for(job)
  payload = request @sockets[:parser], job
  definition = request @sockets[:dictionary], job[:job_name]
  [payload, definition]
end

Contract Proc => Or[Hash,nil]
def exponentially_retry
  sleep @timer.next_interval
  value = yield if block_given?
  @timer.clear unless value.nil?
  value
end

Contract Or[Array,nil], Or[String, nil] => nil
def check_whitelist(whitelist, branch)
  return if whitelist.nil?
  raise 'Branch not whitelisted' unless whitelist.include? branch
end

Contract Fixnum => Bool
def finish(job_id)
  @sockets[:conveyor].request({method: 'finish', data: job_id}, {})
end

puts 'Started'
@sockets = {
  conveyor: EZMQ::Client.new(port: configatron.conveyor_port),
  worker: EZMQ::Pusher.new(:bind, port: configatron.worker_port),
  parser: EZMQ::Client.new(port: configatron.payload_parser_port),
  dictionary: EZMQ::Client.new(port: configatron.job_dictionary_port)
}
@sockets.each { |_key, socket| socket.serialize_with_json! }
@timer = ExponentialBackoff.new 0.1, 3

# TODO: profiler to get a better idea of how long we should wait based on historical information
loop do
  begin
    job = exponentially_retry { request_job }
    next if job.nil?
    payload, definition = request_data_for job
    check_whitelist definition['branch_whitelist'], payload['branch']
    assembled_job = assemble job, payload, definition
    @sockets[:worker].send(assembled_job, {})
  rescue RuntimeError => error
    p error.message
    finish job[:job_id]
    next
  end
end

# job_data = Fiber.new do
#   timer = 0
#   loop do
#     timer += 1
#     sleep 3
#     data = get_some_data
#     Fiber.yield data
#   end
# end

# loop do
#   job = exponentially_retry { request_job }
#   next if job.nil?
#   payload, definition, error = request_data_for job
#   next unless whitelisted?(definition, payload['branch'])
#   assembled_job = assemble job, payload, definition
#   @sock
