#!/usr/bin/env ruby
require 'yaml'
require 'contracts'
require 'exponential_backoff'
require 'ezmq'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
$stdout.sync = true
include Contracts
using ExtendedEZMQ

Contract Hash => Hash
def sanitize(data)
  return {} if data.empty?
  data = data.map { |key, value| { key => value.to_s } }
  data.reduce :merge
end

Contract Hash => String
def extended_path_for(environment)
  environment['PATH'] ||= ENV['PATH']
  scripts_path = File.expand_path configatron.scripts_path
  "#{environment['PATH']}:#{scripts_path}"
end

Contract Maybe[Hash], Hash => Hash
def create_job_context(job_environment, payload)
  environment = (job_environment || {}).merge payload
  environment = sanitize environment
  environment.merge 'PATH' => extended_path_for(environment)
end

Contract Hash, Hash, Hash => Hash
def assemble(job, payload, definition)
  {
    commands: definition['commands'],
    context: create_job_context(definition['environment'], payload),
    job_name: job[:job_name],
    job_id: job[:job_id]
  }
end

Contract None => Maybe[Hash]
def request_job
  job_id = @sockets[:conveyor].request method: 'dequeue'
  return nil if job_id.nil?
  raw_job = @sockets[:conveyor].request method: 'lookup', data: job_id
  puts "Assembling: '#{raw_job}'"
  raw_job.merge job_id: job_id
end

Contract EZMQ::Socket, Any => Hash
def request(socket, data)
  response = socket.request data, {}
  fail response[:error] unless response[:error].empty?
  response[:data]
end

Contract Hash => [Hash, Hash]
def request_data_for(job)
  payload = request @sockets[:parser], job
  definition = request @sockets[:dictionary], job[:job_name]
  [payload, definition]
end

Contract Maybe[Array], Maybe[String] => nil
def check_whitelist(whitelist, branch)
  return if whitelist.nil?
  fail 'Branch not whitelisted' unless whitelist.include? branch
end

Contract Fixnum => Bool
def finish(job_id)
  @sockets[:conveyor].request method: 'finish', data: job_id
end

job_search = Fiber.new do
  # TODO: profiler to get a better idea of how long we should wait based on historical information
  timer = ExponentialBackoff.new 0.1, 3
  loop do
    sleep timer.next_interval
    job = request_job
    next if job.nil?
    timer.clear
    Fiber.yield job
  end
end

puts 'Started'
@sockets = {
  conveyor: EZMQ::Client.new(port: configatron.conveyor_port),
  worker: EZMQ::Pusher.new(:bind, port: configatron.worker_port),
  parser: EZMQ::Client.new(port: configatron.payload_parser_port),
  dictionary: EZMQ::Client.new(port: configatron.job_dictionary_port)
}
@sockets.each { |_key, socket| socket.serialize_with_json! }

loop do
  job = job_search.resume
  begin
    payload, definition = request_data_for job
    check_whitelist definition['branch_whitelist'], payload['branch']
    assembled_job = assemble job, payload, definition
    @sockets[:worker].send assembled_job
  rescue RuntimeError => error
    puts error.message
    finish job[:job_id]
    next
  end
end
