#!/usr/bin/env ruby
require 'bundler/setup'
require 'yaml'
require 'contracts'
require 'exponential_backoff'
require 'ezmq'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
$stdout.sync = true
include Contracts
using ExtendedEZMQ

Contract Hash => Hash
def sanitize(data)
  data = data.map { |key, value| {key => value.to_s} }
  data.reduce(:merge)
end

Contract Hash, Hash => Hash
def job_context(job_environment, context_from_payload)
  sanitize job_environment.merge(context_from_payload)
end

Contract Hash, Hash, Hash => Hash
def assemble(job, payload, definition)
  {
    commands: definition['commands'],
    context: job_context(definition['environment'] || {}, payload),
    job_name: job[:job_name],
    job_id: job[:job_id]
  }
end

Contract None => Or[Hash,nil]
def request_job
  job_id = @conveyor.request({method: 'dequeue'}, {})
  return nil if job_id.nil?
  raw_job = @conveyor.request({method: 'lookup', data: job_id}, {})
  puts "Assembling: '#{raw_job}'"
  raw_job.merge job_id: job_id
end

Contract EZMQ::Client, Any => [Hash, String]
def request(client, data)
  response = client.request data, {}
  puts response[:error] unless response[:error].empty?
  [response[:payload], response[:error]]
end

Contract Hash => [Hash, String]
def parse_payload_from(job)
  request @parser, job
end

Contract Hash => [Hash, String]
def request_definition_for(job)
  p job
  request @dictionary, job[:job_name]
end

Contract Proc => Or[Hash,nil]
def exponentially_retry
  sleep @timer.next_interval
  value = yield if block_given?
  @timer.clear unless value.nil?
  value
end

Contract Hash, Or[String, nil] => Bool
def whitelisted?(definition, branch)
  return true if definition['branch_whitelist'].nil?
  definition['branch_whitelist'].include? branch
end

puts 'Started'
@conveyor = EZMQ::Client.new port: configatron.conveyor_port
@conveyor.serialize_with_json!
@worker = EZMQ::Pusher.new port: configatron.worker_port
@worker.serialize_with_json!
@parser = EZMQ::Client.new port: configatron.payload_parser_port
@parser.serialize_with_json!
@dictionary = EZMQ::Client.new port: configatron.job_dictionary_port
@dictionary.serialize_with_json!
@timer = ExponentialBackoff.new 0.1, 3

# TODO: profiler to get a better idea of how long we should wait based on historical information
loop do
  job = exponentially_retry { request_job }
  next if job.nil?
  payload, error = parse_payload_from job
  next unless error.empty?
  definition, error = request_definition_for job
  next unless error.empty?
  next unless whitelisted?(definition, payload['branch'])
  assembled_job = assemble job, payload, definition
  @worker.send(assembled_job, {}) unless assembled_job.empty?
end
