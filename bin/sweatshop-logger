#!/usr/bin/env ruby
require 'ezmq'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
using ExtendedEZMQ

@sockets = {
  subscriber: EZMQ::Subscriber.new(:bind, port: configatron.logger_port, topic: 'robot-sweatshop-logging'),
  reflector: EZMQ::Publisher.new(:bind, port: configatron.reflector_port)
}
@sockets.each do |key, socket|
  socket.serialize_with_json! unless key == :logger
end

def write(text, for_process:)
  log_file = File.expand_path "#{configatron.logfile_path}/#{for_process}.log"
  File.open log_file, 'a' do |log|
    log.write "[#{Time.now.utc}] #{text}\n"
  end
end

def parse_worker_id_from(data)
  process, worker_id = data[:process].split '-'
  data.merge process: process, text: "[#{worker_id}] #{data[:text]}"
end

write 'Started', for_process: 'logger'
@sockets[:subscriber].listen do |data, topic|
  data = parse_worker_id_from data if data[:process] =~ /worker/
  write data[:text], for_process: data[:process]
  @sockets[:reflector].send data, topic: topic
end
