#!/usr/bin/env ruby
require 'bundler/setup'
require 'ezmq'
require 'stubborn_queue'
require 'oj'
require 'contracts'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
using ExtendedEZMQ

queue_settings = {
  name: 'test',
  timeout: configatron.job_timeout_length,
  file: "#{configatron.database_path}/conveyor.db"
}
@items = StubbornQueue.new queue_settings
$stdout.sync = true
include Contracts

Contract Hash => Fixnum
def enqueue(item)
  puts "enqueue #{item}"
  @items.enqueue Oj.dump(item)
end

Contract None => Or[Fixnum,nil]
def dequeue
  puts "dequeue"
  @items.dequeue
end

Contract Fixnum => Hash
def lookup(id)
  puts "lookup #{id}"
  Oj.load @items.lookup(id)
end

Contract Fixnum => Bool
def finish(id)
  puts "finish #{id}"
  @items.finish id
end

Contract String => Bool
def supported?(method)
  %w(enqueue dequeue lookup finish).include? method
end

Contract Hash => Any
def complete(request)
  arguments = []
  return send(request[:method], request[:data]) if request[:data]
  send(request[:method])
end

puts 'Starting the Conveyor'
server = EZMQ::Server.new port: configatron.conveyor_port
server.serialize_with_json!
server.listen do |request|
  puts "Received: #{request.inspect}"
  next unless request.is_a? Hash
  next unless supported? request[:method]
  complete request
end
