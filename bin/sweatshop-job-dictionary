#!/usr/bin/env ruby
require 'oj'
require 'ezmq'
require 'contracts'
require 'robot_sweatshop/config'
require 'robot_sweatshop/connections'
include Contracts
using ExtendedEZMQ

Contract None => String
def job_path
  File.expand_path configatron.job_path
end

Contract String => Or[Hash, nil]
def load_if_exists(config_path)
  @sockets[:logger].write "Reading job configuration from #{config_path}"
  YAML.load_file config_path if File.exist? config_path
end

Contract None => Hash
def empty_config
  @sockets[:logger].write 'Job configuration not found or empty'
  {}
end

Contract String => Hash
def load_config_for(job_name)
  load_if_exists("#{job_path}/#{job_name}.yaml") || empty_config
end

Contract Hash, Hash => Hash
def formatted(payload = {}, error: '')
  { data: payload, error: error }
end

Contract String => Hash
def define(job_name)
  config = load_config_for job_name
  return formatted error: 'Job not found or empty' if config.empty?
  return formatted error: 'No commands' unless config['commands'].is_a? Array
  formatted config
end

@sockets = {
  server: EZMQ::Server.new(port: configatron.job_dictionary_port),
  logger: EZMQ::Logger.new('job_dictionary')
}
@sockets.each do |key, socket|
  socket.serialize_with_json! unless key == :logger
end

@sockets[:logger].write 'Started'
@sockets[:server].listen do |job_name|
  @sockets[:logger].write "Looking up: #{job_name}"
  define job_name
end
